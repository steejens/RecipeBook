// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RecipeBook.Data;

#nullable disable

namespace RecipeBook.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221004061928_ingredient-calories-table-deleted")]
    partial class ingredientcaloriestabledeleted
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RecipeBook.Domain.Entities.CookingInstruction", b =>
                {
                    b.Property<int>("InstId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InstId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FoodRefId")
                        .HasColumnType("integer");

                    b.Property<string>("InstructionStepText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.HasKey("InstId");

                    b.HasIndex("FoodRefId");

                    b.ToTable("CookingInstructions");
                });

            modelBuilder.Entity("RecipeBook.Domain.Entities.DifficultyLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LevelId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("LevelValue")
                        .HasColumnType("integer");

                    b.HasKey("LevelId");

                    b.ToTable("DifficultyLevels");
                });

            modelBuilder.Entity("RecipeBook.Domain.Entities.Food", b =>
                {
                    b.Property<int>("FoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FoodId"));

                    b.Property<int>("CategoryRefId")
                        .HasColumnType("integer");

                    b.Property<string>("CoverPhoto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DifficultyRefId")
                        .HasColumnType("integer");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TypeRefId")
                        .HasColumnType("integer");

                    b.HasKey("FoodId");

                    b.HasIndex("CategoryRefId");

                    b.HasIndex("DifficultyRefId");

                    b.HasIndex("TypeRefId");

                    b.ToTable("Food");
                });

            modelBuilder.Entity("RecipeBook.Domain.Entities.FoodCategory", b =>
                {
                    b.Property<int>("CatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CatId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("CatId");

                    b.ToTable("FoodCategories");
                });

            modelBuilder.Entity("RecipeBook.Domain.Entities.FoodIngredient", b =>
                {
                    b.Property<int>("FoodIngId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FoodIngId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FoodRefId")
                        .HasColumnType("integer");

                    b.Property<int>("IngredientRefId")
                        .HasColumnType("integer");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<float>("UnitCount")
                        .HasColumnType("real");

                    b.Property<int>("UnitRefId")
                        .HasColumnType("integer");

                    b.HasKey("FoodIngId");

                    b.HasIndex("FoodRefId");

                    b.HasIndex("IngredientRefId");

                    b.HasIndex("UnitRefId");

                    b.ToTable("FoodIngredients");
                });

            modelBuilder.Entity("RecipeBook.Domain.Entities.FoodType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TypeId");

                    b.ToTable("FoodTypes");
                });

            modelBuilder.Entity("RecipeBook.Domain.Entities.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IngredientId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<float>("KcalPer100g")
                        .HasColumnType("real");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("RecipeBook.Domain.Entities.IngredientMeasurement", b =>
                {
                    b.Property<int>("IngMeaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IngMeaId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("GramPerUnit")
                        .HasColumnType("real");

                    b.Property<int>("IngredientRefId")
                        .HasColumnType("integer");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<int>("UnitRefId")
                        .HasColumnType("integer");

                    b.HasKey("IngMeaId");

                    b.HasIndex("IngredientRefId");

                    b.HasIndex("UnitRefId");

                    b.ToTable("IngredientMeasurements");
                });

            modelBuilder.Entity("RecipeBook.Domain.Entities.IngredientUnit", b =>
                {
                    b.Property<int>("UnitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UnitId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UnitId");

                    b.ToTable("IngredientUnits");
                });

            modelBuilder.Entity("RecipeBook.Domain.Entities.CookingInstruction", b =>
                {
                    b.HasOne("RecipeBook.Domain.Entities.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");
                });

            modelBuilder.Entity("RecipeBook.Domain.Entities.Food", b =>
                {
                    b.HasOne("RecipeBook.Domain.Entities.FoodCategory", "FoodCategory")
                        .WithMany()
                        .HasForeignKey("CategoryRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBook.Domain.Entities.DifficultyLevel", "DifficultyLevel")
                        .WithMany()
                        .HasForeignKey("DifficultyRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBook.Domain.Entities.FoodType", "FoodType")
                        .WithMany()
                        .HasForeignKey("TypeRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DifficultyLevel");

                    b.Navigation("FoodCategory");

                    b.Navigation("FoodType");
                });

            modelBuilder.Entity("RecipeBook.Domain.Entities.FoodIngredient", b =>
                {
                    b.HasOne("RecipeBook.Domain.Entities.Food", "Food")
                        .WithMany()
                        .HasForeignKey("FoodRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBook.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBook.Domain.Entities.IngredientUnit", "IngredientUnit")
                        .WithMany()
                        .HasForeignKey("UnitRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Ingredient");

                    b.Navigation("IngredientUnit");
                });

            modelBuilder.Entity("RecipeBook.Domain.Entities.IngredientMeasurement", b =>
                {
                    b.HasOne("RecipeBook.Domain.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("IngredientRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecipeBook.Domain.Entities.IngredientUnit", "IngredientUnit")
                        .WithMany()
                        .HasForeignKey("UnitRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("IngredientUnit");
                });
#pragma warning restore 612, 618
        }
    }
}
